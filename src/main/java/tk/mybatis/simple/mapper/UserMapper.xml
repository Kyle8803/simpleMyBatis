<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
          PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
          "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 当Mapper接口和XML文件关联的时候，命名空间namespace的值就需要配置成接口的全限定名称,
     MyBatis内部就是通过这个值将接口和XML关联起来。 -->          
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
	
	<!-- jdbcType: 列对应的数据库类型, 这是JDBC jdbcType的需要，不是MyBatis的需要。 -->
	<!-- 为了防止类型错误，对于一些特殊的数据类型，建议指定具体的jdbcType值。
	     例如 headImg指定BLOB类型，createTime指定TIMESTAMP类型-->
	<!-- BLOB对应的Java类型是ByteArrayInputStream,就是二进制字节数组输入流.
	     由于数据库MySql区分date, time, datetime类型，但是Java中一般只使用java.util.Date类型。因此为了保证数据类型的正确性，
		 需要手动指定JDBC日期类型，date, time, datetime 对应的JDBC类型分别为Date, TIME, TIMESTAMP -->
		 
	<resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
		<id     column="id"            property="id"           jdbcType="BIGINT"    javaType="Long"/>
		<result column="user_name"     property="userName"     jdbcType="VARCHAR"   javaType="String"/>
		<result column="user_password" property="userPassword" jdbcType="VARCHAR"   javaType="String"/>
		<result column="user_email"    property="userEmail"    jdbcType="VARCHAR"   javaType="String"/>
		<result column="user_info"     property="userInfo"     jdbcType="VARCHAR"   javaType="String"/>
		<result column="head_img"      property="headImg"      jdbcType="BLOB"      javaType="byte[]"/>
		<result column="create_time"   property="createTime"   jdbcType="TIMESTAMP" javaType="Date"/>
	</resultMap>
	
	<!-- MyBatis SQL中使用预编译参数的一种方式，大括号中的id是传入的参数名。 -->
	<select id="selectById" resultMap="userMap" parameterType="Long">
		select * from sys_user where id = #{id}
	</select>
	
	<!-- 2.4.1 简单的insert()方法 -->
	<!-- id: 命名空间中的唯一标识符，可用来代表这条语句。 -->
	<insert id="insert">
		insert into sys_user(id, 
							 user_name, 
							 user_password,
							 user_email, 
							 user_info, 
		                     head_img,
		                     create_time)
		    values(#{id,           jdbcType=BIGINT,  javaType=Long},
		           #{userName,     jdbcType=VARCHAR, javaType=String}, 
		           #{userPassword, jdbcType=VARCHAR, javaType=String}, 
		           #{userEmail,    jdbcType=VARCHAR, javaType=String},
		           #{userInfo,     jdbcType=VARCHAR, javaType=String}, 
		           #{headImg,      jdbcType=BLOB},
		           #{createTime,   jdbcType=TIMESTAMP, javaType=Date})
	</insert>
	
	<!-- 2.4.2 使用JDBC方式返回主键自增的值 -->
	<!-- useGeneratedKeys: 默认值为false.如果设置为true, 
	                       MyBatis会使用JDBC的getGeneratedKeys()方法取出由数据库内部生成的主键。 -->
	<!-- keyProperty: MyBatis通过getGeneratedKeys()获取主键值后将要赋值的属性名。(如SysUser.class private Long id;)-->     
	<!-- 由于要使用数据库返回的主键值，所以SQL上下两部分的列中去掉了id列和对应的#{id}属性。 -->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id" parameterType="tk.mybatis.simple.model.SysUser">
		insert into sys_user(user_name, user_password, user_email, user_info,
		                     head_img, create_time)
		    values (#{userName}, #{userPassword}, #{userEmail}, #{userInfo},
		            #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})                 
	</insert>
	
	<!-- 2.4.3 使用selectKey标签返回主键的值,数据库是MySql.-->
	<!-- 使用<selectKey>标签获取主键的值，这种方式不仅适用于不提供主键自增功能的数据库，
	     也适用于提供主键自增功能的数据库。 -->
	<!-- keyColumn: 仅对insert和update有用。
	                通过生成的键值设置表中的列名，这个设置仅在某些数据库(如PostgreSQL)中是必须的，
	                当主键列不是表中的第一列时需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。-->
	<!-- resultType 用于设置返回值类型。 -->          
	<!-- order 属性的设置和使用的数据库有关。
	           在MySql 中，order属性设置的值是AFTER, 因为当前记录的主键值在insert语句执行成功之后才能获取到。
	           在Oracle中，order属性设置的值是BEFORE,因为Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中。 -->
				
	<insert id="insert3">
		insert into sys_user(user_name, 
		                     user_password, 
							 user_email, 
							 user_info,
		                     head_img, 
							 create_time)
		     values (#{userName}, 
			         #{userPassword}, 
					 #{userEmail}, 
					 #{userInfo},
		             #{headImg,    jdbcType=BLOB},
					 #{createTime, jdbcType=TIMESTAMP})		
		<selectKey keyProperty="id" keyColumn="id" resultType="long" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>                                         
	</insert>
	
	<!-- 2.6 delete用法 -->
	<delete id = "deleteById" parameterType="Long">
		delete from sys_user where id = #{id}
	</delete>
	
	<!-- 2.5 update用法 -->
	<update id="updateById" parameterType="tk.mybatis.simple.model.SysUser">
		update sys_user
		   set user_name     = #{userName},
		       user_password = #{userPassword},
		       user_email    = #{userEmail},
		       user_info     = #{userInfo},
		       head_img      = #{headImg,    jdbcType = BLOB},
		       create_time   = #{createTime, jdbcType = TIMESTAMP}
		 where id = #{id}      
	</update>
	
	<!--查询全部用户-->
	<select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
		select id,
		       user_name     userName,
		       user_password userPassword,
		       user_email    userEmail,
		       user_info     userInfo,
		       head_img      headImg,
		       create_time   createTime
		  from sys_user    
	</select>
	
	<!-- 4.4.1 foreach实现in集合 -->
	<!-- public List<SysUser> selectByIdList(List<Long> idList);-->
	<!-- foreach包含以下属性 -->
	<!-- collection: 必填，值为要迭代循环的属性名,这个属性值的情况有很多种。-->
	<!-- item: 变量名，值为从迭代对象中取出的每一个值。 -->
	<!-- index: 索引的属性名，在集合数组情况下值为当前索引值，当迭代循环的对象是Map类型时，这个值为Map的key(键值).-->
	
	<!--  open: 整个循环内容开头的字符串 -->
	<!-- close: 整个循环内容结尾的字符串 -->
	<!-- seperator: 每次循环的分隔符 -->
	<!-- foreach元素中的内容最终成为了in (?,?) -->
	<!--根据用户id集合查询-->
	<select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser" parameterType="List">
		select id,
			   user_name     userName,
			   user_password userPassword,
			   user_email    userEmail,
			   user_info     userInfo,
			   head_img      headImg,
			   create_time   createTime
		  from sys_user
		 where id in	
		<foreach collection="list" item="id" open="(" close=")" separator="," index="i">
			#{id}
		</foreach>
	</select>
	
	<!--4.4.2 foreach实现批量插入 -->
	<!--public int insertList(List<SysUser> userList);-->
	<!--批量插入用户信息-->
	<!--通过item指定了循环变量后，在引用值的时候使用的是"属性.属性"的方式，如user.userName -->
	<!--这里无需加上open="("和close=")",否则会拼接成values ( (?, ?, ?, ?, ?, ?) , (?, ?, ?, ?, ?, ?) ) 不符合sql语法. -->
	<insert id = "insertList" parameterType="List">
		insert into sys_user(user_name, user_password, user_email,
							 user_info,      head_img, create_time)
		values
		<foreach collection="list" item="user" index="" separator=",">
			(#{user.userName}, #{user.userPassword}, #{user.userEmail},
			 #{user.userInfo}, #{user.headImg, jdbcType = BLOB}, #{user.createTime, jdbcType = TIMESTAMP})
		</foreach>
	</insert>
	
	<!-- 4.4.3 foreach实现动态update -->
	<!--通过Map更新列-->
	<!--public int updateByMap(Map<String, Object> map);-->
	<!--这里的key作为列名，对应的值作为该列的值，通过foreach将需要更新的字段拼接在SQL语句中. -->
	<update id = "updateByMap" parameterType="java.util.Map">
		update sys_user
		set
		<foreach collection="_parameter" index="key" item="value" separator=",">
			${key} = #{value}
		</foreach>
		where id = #{id}
	</update>
	
	<!-- 不通过foreach实现动态update -->
	<!--通过Map更新列-->
	<!--public int updateByMap(Map<String, Object> map);-->
	<update id = "updateByMap2" parameterType="java.util.Map">
		update sys_user
		   set id = #{id,jdbcType=CHAR},
		   	   <if test = "userEmail != null and userEmail != ''">
		   	   		user_email = #{userEmail,jdbcType=CHAR},	
		   	   </if>
		       <if test = "userPassword != null and userPassword != ''"> 
		       		user_password = #{userPassword,jdbcType=CHAR}
		       </if>		
		 where id = #{id,jdbcType=CHAR}
	</update>
	
	<!-- 2.7 多个接口参数的用法 -->
	<!-- 根据用户id和角色的enabled状态获取用户的角色-->
	<!-- UserMapper.java
		public List<SysRole> selectRolesByUserIdAndRoleEnabled(
			@Param("userId")    Long userId,
			@Param("enabled")Integer enabled);	
	 -->
	<select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole" parameterType="Map">
	    select sys_role.id,
	           sys_role.role_name roleName,
	           sys_role.enabled,
	           sys_role.create_by   createBy,
	           sys_role.create_time createTime
	      from sys_user
	     inner join sys_user_role on sys_user_role.user_id = sys_user.id 
	     inner join sys_role      on sys_user_role.role_id = sys_role.id 
	     where      sys_user.id = #{userId} 
	       and sys_role.enabled = #{enabled}    
	</select>
	
	<!-- 4.1.3 在insert语句动态插入列中使用if标签 -->
	<!-- 在数据库表中插入数据的时候，如果某一列的参数值不为空，就使用传入的值，如果传入的参数为空，就使用数据库中的默认值，
	     而不使用传入的空值。使用if标签就可以实现这种动态插入列的功能。 -->
	<insert id="insert5" useGeneratedKeys="true" keyProperty="id" parameterType="tk.mybatis.simple.model.SysUser">
		insert into sys_user(
			user_name, 
			user_password,
			<if test = "userEmail != null and userEmail != ''">
				user_email,	
			</if>
			user_info, 
			head_img, create_time)
		values(
			#{userName}, 
			#{userPassword},
			<if test = "userEmail != null and userEmail != ''">
				#{userEmail},	
			</if>
			#{userInfo}, 
			#{headImg, jdbcType = BLOB},
			#{createTime, jdbcType = TIMESTAMP})	
	</insert>
	
	<!-- 4.1.1 在where条件中使用if标签 -->
	<!-- 根据动态条件查询用户信息-->
	<!-- public List<SysUser> selectByUser(SysUser sysUser);-->
	<!-- if标签有一个必填的属性test,test的属性值是一个符合OGNL要求的判断表达式，
	     表达式的结果可以是true或false,除此之外的所有非0值都为true,只有0为false. -->
	<!-- 判断条件property != null 或 property == null:适用于任何类型的字段，用于判断属性值是否为空。-->
	<!-- 判断条件property != '' 或 property == '':仅适用于String类型的字段，用于判断是否为空字符串。 -->
	<!-- and 和 or:当有多个判断条件时，使用and 或 or进行连接，嵌套的判断可以使用小括号分组，
	     and 相当于Java中的与(&&),or相当于Java中的或(||). -->             
	<select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser" parameterType="tk.mybatis.simple.model.SysUser">
		select id,
		       user_name     userName,
		       user_password userPassword,
		       user_email    userEmail,
		       user_info     userInfo,
		       head_img      headImg,
		       create_time   createTime
		  from sys_user
		 where 1 = 1
		 <if test = "userName != null and userName != ''">
			 and user_name like concat('%', #{userName}, '%')
		 </if>
		 <if test = "userEmail != null and userEmail != ''">
			 and user_email = #{userEmail}
		 </if>         
	</select>
	
	<!-- 4.1.2 在update更新列中使用if标签 -->
	<!-- 根据主键更新-->
	<update id="updateByIdSelective" parameterType="tk.mybatis.simple.model.SysUser">
		update sys_user
		   set <if test = "userName != null and userName != ''">
				   user_name = #{userName},
		   	   </if>
		   	   
		   	   <if test = "userPassword != null and userPassword != ''">
		   	       user_password = #{userPassword},
		   	   </if>	
		   	   
		   	   <if test = "userEmail != null and userEmail != ''">
		   	       user_email = #{userEmail},
		   	   </if>
		   	   
		   	   <if test = "userInfo != null and userInfo != ''">
		   	       user_info = #{userInfo},
		   	   </if>
		   	   
		   	   <if test = "headImg != null">
		   	       head_img = #{headImg, jdbcType = BLOB},
		   	   </if>
		   	   
		   	   <if test = "createTime != null">
		   	       create_time = #{createTime, jdbcType = TIMESTAMP},
		   	   </if>
		   	   id = #{id}
		 where id = #{id}
	</update>
	
	<!-- 4.3.1 where标签用法 -->
	<!-- 根据动态条件查询用户信息-->
	<!-- where标签的作用:如果该标签包含的元素中有返回值，就插入一个where标签;
	     如果where后面的字符串是以AND和OR开头的，就将它们剔除. -->
	<select id="selectByUser2" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name     userName,
			   user_password userPassword,
			   user_email    userEmail,
			   user_info     userInfo,
			   head_img      headImg,
			   create_time   createTime
		  from sys_user
		<where>
			<if test = "userName != null and userName != ''">
			    and user_name like concat('%', #{userName}, '%')
			</if>
			<if test = "userEmail != null and userEmail != ''">
			    and user_email = #{userEmail}
			</if>
		</where>
        <!--当if条件都不满足的时候，where元素中没有内容，所以在SQL中不会出现where,也就不存在4.1.1节中SQL错误的问题。
		    如果if条件满足，where元素的内容就是以and开头的条件，where会自动去掉开头的and,这也能保证where条件正确。
			和4.1.1节中相比，这种情况下生成的SQL更干净、更贴切，不会在任何情况下都有where 1 = 1这样的条件。-->		
	</select> 
	
	<!-- 4.2 choose用法 -->
	<!-- 根据用户id或用户名查询 当参数id有值的时候优先使用id查询，当id没有值时就去判断用户名是否有值，
	     如果有值就用用户名查询，如果用户名也没有值，就使SQL查询无结果。-->
	<!-- if标签提供了基本的条件判断，但是它无法实现if...else,if...else...的逻辑，要想实现这样的逻辑，
	     就需要用到choose when otherwise标签。
		 choose元素包含when和otherwise两个标签，一个choose中至少有一个when,0个或者1个otherwise.-->
	<select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
		select id,
				user_name     userName,
				user_password userPassword,
				user_email    userEmail,
				user_info     userInfo,
				head_img      headImg,
				create_time   createTime
		   from sys_user
		  where 1 = 1
		<choose>
			<when test = "id != null">
				  and id = #{id}
			</when>
			
			<when test = "userName != null and userName != ''">
			      and user_name = #{userName}
			</when>
			
			<otherwise>
				  and 1 = 2
			</otherwise>
		</choose>	
	</select>
	<!--在以上查询中，如果没有otherwise这个限制条件，所有的用户都会被查询出来，
	    因为我们在对应的接口方法中使用了SysUser作为返回值，所以当实际查询是多个返回值时就会报错。
	    添加otherwise条件后，由于where条件不满足，因此在这种情况下就查询不到结果。--> 
</mapper>